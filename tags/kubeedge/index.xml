<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>kubeedge - 标签 - 豆浆的博客</title><link>https://blog.lomot.cn/tags/kubeedge/</link><description>kubeedge - 标签 - 豆浆的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 04 May 2021 00:16:21 +0800</lastBuildDate><atom:link href="https://blog.lomot.cn/tags/kubeedge/" rel="self" type="application/rss+xml"/><item><title>Kubeedge源码阅读系列--edgecore.edgehub模块</title><link>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-4/</link><pubDate>Tue, 04 May 2021 00:16:21 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-4/</guid><description>前言 代码基于 kubeedge1.3 模块入口 先看EdgeHub的原型 1 2 3 4 5 6 7 8 //EdgeHub defines edgehub object structure type EdgeHub struct { chClient clients.Adapter reconnectChan chan struct{} syncKeeper map[string]chan model.Message keeperLock sync.RWMutex enable bool } 从 Start()函数开始 1 2 3 4 5</description></item><item><title>Kubeedge源码阅读系列--cloudcore.edgecontroller模块</title><link>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-3/</link><pubDate>Mon, 03 May 2021 01:19:39 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-3/</guid><description>前言 代码基于 kubeedge1.3 模块入口 edgecontroller 与上次看的 devicecontroller 源码很像, 入口分别创建了upstream和downstream, 不同的是这里的upstream和down</description></item><item><title>Kubeedge源码阅读系列--cloudcore.devicecontroller模块</title><link>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-2/</link><pubDate>Sun, 02 May 2021 17:46:14 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-2/</guid><description>前言 代码基于 kubeedge1.3 模块入口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Start controller func (dc *DeviceController) Start() { downstream, err := controller.NewDownstreamController() if err != nil { klog.Errorf(&amp;#34;New downstream controller failed with error: %s&amp;#34;, err) os.Exit(1) } upstream, err := controller.NewUpstreamController(downstream) if err != nil { klog.Errorf(&amp;#34;new upstream controller failed</description></item></channel></rss>