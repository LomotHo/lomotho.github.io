<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>linux - 标签 - 豆浆的博客</title><link>https://blog.lomot.cn/tags/linux/</link><description>linux - 标签 - 豆浆的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 22 Sep 2022 02:26:10 +0000</lastBuildDate><atom:link href="https://blog.lomot.cn/tags/linux/" rel="self" type="application/rss+xml"/><item><title>linux 进程线程中的各种 id</title><link>https://blog.lomot.cn/2022/09/process-and-thread-id-in-linux/</link><pubDate>Thu, 22 Sep 2022 02:26:10 +0000</pubDate><author>作者</author><guid>https://blog.lomot.cn/2022/09/process-and-thread-id-in-linux/</guid><description>linux 进程与线程中的各种 id 操作系统中有进程和线程的概念, 分别是进程对应 pid(process id), 线程对应 tid(thread id). 而在 linux 操作系统中, 由于一些历史遗留原因, linux 中的 pid 其实是 LWP tid,</description></item><item><title>Kubeedge源码阅读系列--edgecore.edgehub模块</title><link>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-4/</link><pubDate>Tue, 04 May 2021 00:16:21 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-4/</guid><description>前言 代码基于 kubeedge1.3 模块入口 先看EdgeHub的原型 1 2 3 4 5 6 7 8 //EdgeHub defines edgehub object structure type EdgeHub struct { chClient clients.Adapter reconnectChan chan struct{} syncKeeper map[string]chan model.Message keeperLock sync.RWMutex enable bool } 从 Start()函数开始 1 2 3 4 5</description></item><item><title>Kubeedge源码阅读系列--cloudcore.edgecontroller模块</title><link>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-3/</link><pubDate>Mon, 03 May 2021 01:19:39 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-3/</guid><description>前言 代码基于 kubeedge1.3 模块入口 edgecontroller 与上次看的 devicecontroller 源码很像, 入口分别创建了upstream和downstream, 不同的是这里的upstream和down</description></item><item><title>Kubeedge源码阅读系列--cloudcore.devicecontroller模块</title><link>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-2/</link><pubDate>Sun, 02 May 2021 17:46:14 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/read-source-code-of-kubeedge-2/</guid><description>前言 代码基于 kubeedge1.3 模块入口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Start controller func (dc *DeviceController) Start() { downstream, err := controller.NewDownstreamController() if err != nil { klog.Errorf(&amp;#34;New downstream controller failed with error: %s&amp;#34;, err) os.Exit(1) } upstream, err := controller.NewUpstreamController(downstream) if err != nil { klog.Errorf(&amp;#34;new upstream controller failed</description></item><item><title>关于n2n的编译与使用笔记</title><link>https://blog.lomot.cn/2021/01/build-and-guide-of-n2n/</link><pubDate>Sun, 03 Jan 2021 22:54:53 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/01/build-and-guide-of-n2n/</guid><description>关键字 n2n,2.8,linux,编译,多平台,macOS,arm,aarch64 之前编译过一份 n2n 2.6，现在更新为 2.8，顺便把使用方法补</description></item><item><title>编译了一份n2n 2.6.0(支持 linux x64, linux arm aarch64, macOS)</title><link>https://blog.lomot.cn/2020/05/a-build-for-n2n_v2.6/</link><pubDate>Wed, 06 May 2020 16:10:11 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2020/05/a-build-for-n2n_v2.6/</guid><description>关键字 n2n,2.6.0,linux,编译,多平台,macOS,arm,aarch64 2021.01.03 文档更新，升级到 2.8，补全了使用文档 起因 我手上有 x86_64</description></item><item><title>基于Ubuntu/Debian Server定制自己的nas系统【二】</title><link>https://blog.lomot.cn/2020/04/make-ypur-private-nas-using-ubuntu-debian-server-2/</link><pubDate>Wed, 29 Apr 2020 17:40:51 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2020/04/make-ypur-private-nas-using-ubuntu-debian-server-2/</guid><description>关键字 nas,ubuntu,linux,debian,samba,netatalk 来填上次挖的坑，上次写完了 samba, netatalk, avahi 这些有关文件共享的部分，这次来写 nas 用到的其他服务，下载器 aria2, qbittorrent, 以及 frp 内网穿透的部分 docker 和 docker-compose 考虑部署方便，</description></item><item><title>基于Ubuntu/Debian Server定制自己的nas系统【一】</title><link>https://blog.lomot.cn/2020/04/make-ypur-private-nas-using-ubuntu-debian-server/</link><pubDate>Sun, 19 Apr 2020 22:20:12 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2020/04/make-ypur-private-nas-using-ubuntu-debian-server/</guid><description>关键字 nas,ubuntu,linux,debian,samba,netatalk 使用 ubuntu server 做 NAS 有好几年了，在这里记录一下经验，debian 也适用, 。我的 NAS 主要部署了samba, netatalk, aria2, qbittorrent, frp这些服务，其他的比如 seafile 之类</description></item><item><title>GPG使用笔记</title><link>https://blog.lomot.cn/2019/06/note-about-how-to-use-gpg/</link><pubDate>Sat, 15 Jun 2019 22:21:01 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2019/06/note-about-how-to-use-gpg/</guid><description>部分常用指令 生成新密钥: gpg --full-gen-key 编辑模式 gpg --edit-key lomot 高级编辑模式 gpg --expert --edit-key lomot 显示 keygrip gpg --list-keys --with-keygrip 设置 gpg 根目录 export GNUPGHOME=/Volumes/LOMOT-KEY/gpg/.gnupg 导入导出相关命令 导入公钥 gpg --import /Volumes/LOMOT-KEY/gpg/dist/pub.txt 导入子密钥 gpg --import /Volumes/LOMOT-KEY/gpg/dist/subkeys.txt 导出</description></item><item><title>ubuntu18.04 编译安装 netatalk3.1.11</title><link>https://blog.lomot.cn/2018/08/ubuntu18.04-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-netatalk3.1.11/</link><pubDate>Thu, 02 Aug 2018 08:00:00 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2018/08/ubuntu18.04-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-netatalk3.1.11/</guid><description>编译 （编译可以在另一台ubuntu18.04上进行） 安装编译环境 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo apt install -y \ build-essential \ libevent-dev \ libssl-dev \ libgcrypt-dev \ libkrb5-dev \ libpam0g-dev \ libwrap0-dev \ libdb-dev</description></item></channel></rss>