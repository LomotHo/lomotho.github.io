<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 豆浆的博客</title><link>https://blog.lomot.cn/posts/</link><description>所有文章 | 豆浆的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 15 Jan 2022 11:36:16 +0800</lastBuildDate><atom:link href="https://blog.lomot.cn/posts/" rel="self" type="application/rss+xml"/><item><title>使用 Restic 备份服务器数据</title><link>https://blog.lomot.cn/2022/01/use-restic-to-backup/</link><pubDate>Sat, 15 Jan 2022 11:36:16 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2022/01/use-restic-to-backup/</guid><description>安装rest-server后端 我准备把后端放到 nas 上, 由于不想在 nas 上装 docker, 所以使用 systemd 管理进程, 系统为ubuntu20.04 1 sudo vim /etc/systemd/system/rest-server.service 1 2 3 4 5 6 7</description></item><item><title>让 Gitea 支持 Drone 持续集成工具</title><link>https://blog.lomot.cn/2021/11/deploy-drone-ci-gitea/</link><pubDate>Sat, 20 Nov 2021 10:53:56 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/11/deploy-drone-ci-gitea/</guid><description>简介 Drone是一个现代的持续集成工具 Drone by Harness™ is a modern Continuous Integration platform that empowers busy teams to automate their build, test and release workflows using a powerful, cloud native pipeline engine. 这几天心血来潮, 在自己的服务器上</description></item><item><title>Vscode-ssh远程开发PATH环境变量不能自动刷新的bug</title><link>https://blog.lomot.cn/2021/08/vscode-remote-environment-bug/</link><pubDate>Sun, 01 Aug 2021 12:03:19 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/08/vscode-remote-environment-bug/</guid><description>在使用vscode远程连到Ubuntu上开发golang时偶然遇到了一个奇怪的问题, vscode提示找不到go的二进制文件, 然后列出了环境变</description></item><item><title>Kubeedge源码阅读系列--edgecore.edgehub模块</title><link>https://blog.lomot.cn/2021/05/kubeedge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%974/</link><pubDate>Tue, 04 May 2021 00:16:21 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/kubeedge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%974/</guid><description>前言 代码基于 kubeedge1.3 模块入口 先看EdgeHub的原型 1 2 3 4 5 6 7 8 //EdgeHub defines edgehub object structure type EdgeHub struct { chClient clients.Adapter reconnectChan chan struct{} syncKeeper map[string]chan model.Message keeperLock sync.RWMutex enable bool } 从 Start()函数开始 1 2 3 4 5</description></item><item><title>Kubeedge源码阅读系列--cloudcore.edgecontroller模块</title><link>https://blog.lomot.cn/2021/05/kubeedge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%973/</link><pubDate>Mon, 03 May 2021 01:19:39 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/kubeedge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%973/</guid><description>前言 代码基于 kubeedge1.3 模块入口 edgecontroller 与上次看的 devicecontroller 源码很像, 入口分别创建了upstream和downstream, 不同的是这里的upstream和down</description></item><item><title>Kubeedge源码阅读系列--cloudcore.devicecontroller模块</title><link>https://blog.lomot.cn/2021/05/kubeedge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%972/</link><pubDate>Sun, 02 May 2021 17:46:14 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/05/kubeedge%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%972/</guid><description>前言 代码基于 kubeedge1.3 模块入口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Start controller func (dc *DeviceController) Start() { downstream, err := controller.NewDownstreamController() if err != nil { klog.Errorf(&amp;#34;New downstream controller failed with error: %s&amp;#34;, err) os.Exit(1) } upstream, err := controller.NewUpstreamController(downstream) if err != nil { klog.Errorf(&amp;#34;new upstream controller failed</description></item><item><title>关于n2n的编译与使用笔记</title><link>https://blog.lomot.cn/2021/01/%E5%85%B3%E4%BA%8En2n%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 03 Jan 2021 22:54:53 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2021/01/%E5%85%B3%E4%BA%8En2n%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid><description>关键字 n2n,2.8,linux,编译,多平台,macOS,arm,aarch64 之前编译过一份 n2n 2.6，现在更新为 2.8，顺便把使用方法补</description></item><item><title>使用grub setup_var给600g1DM解锁CFG LOCK, 修改DVMT Pre-Allocated</title><link>https://blog.lomot.cn/2020/11/%E8%A7%A3%E9%94%81cfg_lock%E4%BF%AE%E6%94%B9dvmt/</link><pubDate>Fri, 20 Nov 2020 16:46:12 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2020/11/%E8%A7%A3%E9%94%81cfg_lock%E4%BF%AE%E6%94%B9dvmt/</guid><description>要用到的工具 UEFITool Universal IFR Extractor grub_setupvar.efi 如果你的机型为 800g1DM 或者 600g1DM，可以直接跳到制作 grub 启动盘这一步。 提取 cfg lock 所在的模块 打开 UEFITool，找到 file -&amp;gt; open</description></item><item><title>给600g1DM刷bios以支持nvme硬盘</title><link>https://blog.lomot.cn/2020/07/%E7%BB%99600g1dm%E5%88%B7bios%E4%BB%A5%E6%94%AF%E6%8C%81nvme%E7%A1%AC%E7%9B%98/</link><pubDate>Thu, 23 Jul 2020 15:33:44 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2020/07/%E7%BB%99600g1dm%E5%88%B7bios%E4%BB%A5%E6%94%AF%E6%8C%81nvme%E7%A1%AC%E7%9B%98/</guid><description>前言 此经验应该同样适用800g1DM（理由是hp官网的600g1DM和800g1DM的bios刷写程序用的是同一个包，400g1DM不一样，</description></item><item><title>编译了一份n2n 2.6.0(支持 linux x64, linux arm aarch64, macOS)</title><link>https://blog.lomot.cn/2020/05/%E7%BC%96%E8%AF%91%E4%BA%86%E4%B8%80%E4%BB%BDn2n-2.6/</link><pubDate>Wed, 06 May 2020 16:10:11 +0800</pubDate><author>作者</author><guid>https://blog.lomot.cn/2020/05/%E7%BC%96%E8%AF%91%E4%BA%86%E4%B8%80%E4%BB%BDn2n-2.6/</guid><description>关键字 n2n,2.6.0,linux,编译,多平台,macOS,arm,aarch64 2021.01.03 文档更新，升级到 2.8，补全了使用文档 起因 我手上有 x86_64</description></item></channel></rss>